name: Security & Monitoring

on:
  push:
    branches: [main]
  schedule:
    # Run daily at 3 AM UTC
    - cron: "0 3 * * *"
  workflow_dispatch:

env:
  NODE_VERSION: "20.x"

permissions:
  contents: read
  security-events: write
  issues: write
  pull-requests: write

jobs:
  # ========================================
  # CodeQL Security Analysis
  # ========================================
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        language: ["javascript-typescript"]
    steps:
      - uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: |
            security-and-quality
            security-extended
            security-experimental

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"

  # ========================================
  # Dependency Security Audit
  # ========================================
  dependency-audit:
    name: Dependency Security
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        id: audit
        run: |
          npm audit --json > audit.json || true
          CRITICAL=$(jq '.metadata.vulnerabilities.critical' audit.json)
          HIGH=$(jq '.metadata.vulnerabilities.high' audit.json)
          MODERATE=$(jq '.metadata.vulnerabilities.moderate' audit.json)
          
          echo "critical=$CRITICAL" >> $GITHUB_OUTPUT
          echo "high=$HIGH" >> $GITHUB_OUTPUT
          echo "moderate=$MODERATE" >> $GITHUB_OUTPUT
          
          if [ "$CRITICAL" -gt 0 ]; then
            echo "❌ Found $CRITICAL critical vulnerabilities"
            npm audit
            exit 1
          elif [ "$HIGH" -gt 0 ]; then
            echo "⚠️ Found $HIGH high vulnerabilities"
            npm audit
          else
            echo "✅ No critical or high vulnerabilities found"
          fi

      - name: Check for outdated dependencies
        run: |
          echo "=== Outdated Dependencies ==="
          npm outdated || true

      - name: License check
        run: |
          npx license-checker --production --summary
        continue-on-error: true

  # ========================================
  # Secret Scanning
  # ========================================
  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: TruffleHog Secret Scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

      - name: GitLeaks Secret Scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

  # ========================================
  # SAST - Static Application Security Testing
  # ========================================
  sast:
    name: SAST Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/typescript
            p/nextjs
        continue-on-error: true

      - name: ESLint Security Plugin
        run: |
          npm install --save-dev eslint-plugin-security
          npx eslint . --ext .ts,.tsx,.js,.jsx --plugin security
        continue-on-error: true

  # ========================================
  # Infrastructure Security
  # ========================================
  infra-security:
    name: Infrastructure Security
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check environment variables
        run: |
          echo "=== Checking for exposed secrets in code ==="
          
          # Check for hardcoded API keys
          grep -r "SUPABASE_SERVICE_KEY\|STRIPE_SECRET_KEY\|RESEND_API_KEY" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" . || echo "✅ No hardcoded secrets found"
          
          # Check for exposed URLs
          grep -r "supabase\.co\|stripe\.com" --include="*.ts" --include="*.tsx" . | grep -v "NEXT_PUBLIC" || echo "✅ No exposed backend URLs"

      - name: Validate public files
        run: |
          echo "=== Checking public directory ==="
          
          # Ensure no sensitive files in public
          if ls public/*.env* 2>/dev/null; then
            echo "❌ Found .env files in public directory!"
            exit 1
          fi
          
          # Check manifest files
          for file in public/.well-known/farcaster.json public/frame.json; do
            if [ -f "$file" ]; then
              echo "Validating $file"
              cat "$file" | jq '.' > /dev/null || echo "⚠️ Invalid JSON in $file"
            fi
          done

  # ========================================
  # Compliance Check
  # ========================================
  compliance:
    name: Compliance & Best Practices
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check security headers config
        run: |
          echo "=== Security Headers Check ==="
          
          # Check for CSP configuration
          grep -r "Content-Security-Policy" . --include="*.config.*" || echo "⚠️ No CSP configuration found"
          
          # Check for security middleware
          grep -r "middleware" . --include="*.ts" | grep -i "security\|auth\|csrf" || echo "⚠️ Consider adding security middleware"

      - name: Privacy compliance
        run: |
          echo "=== Privacy Compliance ==="
          
          # Check for privacy policy
          if [ ! -f "app/privacy/page.tsx" ] && [ ! -f "public/privacy.html" ]; then
            echo "⚠️ No privacy policy found"
          fi
          
          # Check for terms of service
          if [ ! -f "app/terms/page.tsx" ] && [ ! -f "public/terms.html" ]; then
            echo "⚠️ No terms of service found"
          fi

  # ========================================
  # Security Report
  # ========================================
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [codeql, dependency-audit, secret-scan, sast, infra-security]
    if: always()
    steps:
      - name: Create security summary
        run: |
          echo "# Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| CodeQL | ${{ needs.codeql.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Dependencies | ${{ needs.dependency-audit.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Secrets | ${{ needs.secret-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| SAST | ${{ needs.sast.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Infrastructure | ${{ needs.infra-security.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Full report available in workflow logs" >> $GITHUB_STEP_SUMMARY

      - name: Create issue if critical findings
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const title = `🚨 Security Alert - ${new Date().toISOString().split('T')[0]}`;
            const body = `## Security scan found issues
            
            **Workflow Run:** [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            ### Results:
            - CodeQL: ${{ needs.codeql.result }}
            - Dependencies: ${{ needs.dependency-audit.result }}
            - Secrets: ${{ needs.secret-scan.result }}
            - SAST: ${{ needs.sast.result }}
            - Infrastructure: ${{ needs.infra-security.result }}
            
            Please review the workflow logs for details.`;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['security', 'critical']
            });
        continue-on-error: true